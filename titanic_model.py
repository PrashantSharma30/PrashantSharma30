# -*- coding: utf-8 -*-
"""TITANIC_MODEL.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10xFk_NcKHpoqIHFztxIFRYSvFcUhd8O7

**TITLE OF PROJECT**-TITANIC SURVIVAL PREDICTION

**OBJECTIVE**-THE DATASET CONTAINS THE DETAILS OF PASSENGERS WHO BOARDED THE TITANIC SHIP AND PREDICTS ABOUT THEIR SURVIVAL USING FEATURES SUCH AS AGE, GENDER AND PASSENGER CLASS.
"""

# Commented out IPython magic to ensure Python compatibility.
#IMPORTING LIBRARIES
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
# %matplotlib inline

#IMPORT DATASET
df=pd.read_csv(r'https://github.com/YBI-Foundation/Dataset/raw/main/Titanic.csv')

#DESCRIBING DATASET
df.head()

df.nunique()

df.info()

df.describe()

#CHECKING FOR NULL VALUES
df.isnull().sum()

#REPRESENTATION OF NULL VALUES
sns.heatmap(df.isnull(),yticklabels=False,cmap='viridis')

#REMOVING THE NULL VALUES
df['age']=df['age'].fillna(df['age'].mean())

df['fare']=df['fare'].fillna(df['fare'].mean())

df.drop(['cabin','boat','body'],axis=1,inplace=True)

df.dropna(inplace=True)

df.isnull().sum()

sns.heatmap(df.isnull(),yticklabels=False,cmap='viridis')

corrMatrix = df.corr()
sns.heatmap(corrMatrix, annot=True)
plt.show()

#DATA VISUALIZATION
sns.countplot(x='survived',data=df)

sns.countplot(x='survived',hue='sex',data=df)

sns.countplot(x='survived',hue='pclass',data=df)

sns.countplot(x='survived',hue='embarked',data=df)

df['age'].plot.hist()

sns.boxplot(x='pclass',y='age',data=df)

# CONVERTING NUMERICAL VALUES TO CATEGORICAL VALUES
Sex=pd.get_dummies(df['sex'])
Embarked=pd.get_dummies(df['embarked'])

Sex

Embarked

df=pd.concat([df,Sex,Embarked],axis=1)

df.drop(['sex','embarked'],axis=1,inplace=True)

#DEFINE TARGET VARIABLE Y AND FEATURE X
df.columns

y=df['survived']
y.shape

X=df[['pclass','age','female','male','C','Q','S']]
X.shape

X

#TRAIN TEST SPLIT DATA
from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test=train_test_split(X,y,train_size=0.7,random_state=2529)
X_train.shape,X_test.shape,y_train.shape,y_test.shape

#Logistic Regression model
from sklearn.linear_model import LogisticRegression
lr= LogisticRegression()
lr.fit(X_train,y_train)

lr.intercept_

lr.coef_

#Predict test data
y_pred=lr.predict(X_test)
y_pred

#Model Accuracy
from sklearn.metrics import classification_report,confusion_matrix,accuracy_score
classification_report(y_test,y_pred)

confusion_matrix(y_test,y_pred)

accuracy_score(y_test,y_pred)*100

#TAKING INPUT FROM USER FOR PREDICTING ABOUT NEW PASSENGER
class_inp=int(input("Enter the Class of the Passenger:"))
age_inp=int(input("Enter the age of the Passenger:"))
mal_inp=int(input("Press 1 if the Passenger is male else Press 0:"))
if(mal_inp==1):
  fem_inp=0
else:
  fem_inp=1
C_inp=int(input("Press 1 if the Passenger is from Cherbourg else Press 0:"))
if(C_inp==1):
  S_inp=0
  Q_inp=0
if(C_inp==0):
  Q_inp=int(input("Press 1 if the Passenger is from Queensville else Press 0:"))
if(C_inp==0 and Q_inp==0):
  S_inp=1
else:
  S_inp=0
user_inp={'pclass':class_inp,'age':age_inp,'female':fem_inp,'male':mal_inp,'C':C_inp,'Q':Q_inp,'S':S_inp}
user=pd.DataFrame(user_inp,index=[1])
print("The details you entered are:\n",user)
ypred2=lr.predict(user)
if(ypred2==0):
  print("The Passenger did not Survive.")
else:
  print("The Passenger did Survive.")